import unittest
import numpy as np
from .locTools import get_theor_spectrum
from .AA_stat import AA_stat
from . import utils
import argparse
import logging
from pyteomics import mass
import os

class AAstatTheorSpectrumTest(unittest.TestCase):

    def setUp(self):
        self.spec_PEPTIDE = {
            ('b', 1): np.array([98.06003647, 227.10262647, 324.15538647, 425.20306647, 538.28712647, 653.31406647]),
            ('y', 1): np.array([148.06043115, 263.08737115, 376.17143115, 477.21911115, 574.27187115, 703.31446115]),
            ('b', 2): np.array([49.53365647, 114.05495147, 162.58133147, 213.10517147, 269.64720147, 327.16067147]),
            ('y', 2): np.array([74.53385381, 132.04732381, 188.58935381, 239.11319381, 287.63957381, 352.16086881])
        }
        self.spec_int_PEPTIDE = {
            'b': {4953, 9806, 11405, 16258, 21310, 22710, 26964, 32415, 32716, 42520, 53828, 65331},
            'y': {26308, 23911, 47721, 28763, 18858, 35216, 37617, 57427, 13204, 14806, 70331, 7453}
        }
        self.spec_mPEPTIDE = {
            ('b', 1): np.array([114.05495147, 243.09754147, 340.15030147, 441.19798147, 554.28204147, 669.30898147]),
            ('y', 1): np.array([148.06043115, 263.08737115, 376.17143115, 477.21911115, 574.27187115, 703.31446115]),
            ('b', 2): np.array([57.53111397, 122.05240897, 170.57878897, 221.10262897, 277.64465897, 335.15812897]),
            ('y', 2): np.array([74.53385381, 132.04732381, 188.58935381, 239.11319381, 287.63957381, 352.16086881])
        }
        self.spec_int_mPEPTIDE = {
            'b': {17057, 55428, 33515, 11405, 12205, 66930, 27764, 24309, 44119, 5753, 22110, 34015},
            'y': {7453, 13204, 14806, 18858, 23911, 26308, 28763, 35216, 37617, 47721, 57427, 70331}
        }
        self.spec_PEPTIDE_cz = {
            ('c', 1): np.array([115.08658557, 244.12917557, 341.18193557, 442.22961557, 555.31367557, 670.34061557]),
            ('z', 1): np.array([131.03388205, 246.06082205, 359.14488205, 460.19256205, 557.24532205, 686.28791205]),
            ('c', 2): np.array([58.04693102, 122.56822602, 171.09460602, 221.61844602, 278.16047602, 335.67394602]),
            ('z', 2): np.array([66.02057926, 123.53404926, 180.07607926, 230.59991926, 279.12629926, 343.64759426])
        }
        self.spec_int_PEPTIDE_cz = {
            'c': {12256, 34118, 27816, 55531, 5804, 22161, 11508, 17109, 67034, 24412, 44222, 33567},
            'z': {12353, 46019, 27912, 35914, 6602, 55724, 13103, 23059, 68628, 18007, 34364, 24606}
        }

    def _compare_spectra(self, spec, spec_int, spec_true, spec_int_true, eps=1e-6):
        spec = {k: sorted(v) for k, v in spec.items()}
        self.assertEqual(spec.keys(), spec_true.keys())
        for k in spec:
            spec[k].sort()
            self.assertTrue(np.allclose(spec[k], spec_true[k], atol=eps))

        self.assertEqual(spec_int, spec_int_true)

    def test_theor_spec_PEPTIDE(self):
        spec, spec_int = get_theor_spectrum(list('PEPTIDE'), 0.01, ion_types=('b', 'y'), maxcharge=2)
        self._compare_spectra(spec, spec_int, self.spec_PEPTIDE, self.spec_int_PEPTIDE)

    def test_theor_spec_mPEPTIDE(self):
        custom_mass = mass.std_aa_mass.copy()
        custom_mass['mP'] = mass.std_aa_mass['P'] + 15.994915
        spec, spec_int = get_theor_spectrum(['mP'] + list('EPTIDE'), 0.01, ion_types=('b', 'y'), maxcharge=2,
                                            aa_mass=custom_mass)
        self._compare_spectra(spec, spec_int, self.spec_mPEPTIDE, self.spec_int_mPEPTIDE)

    def test_theor_spec_PEPTIDE_cz(self):
        spec, spec_int = get_theor_spectrum(list('PEPTIDE'), 0.01, ion_types=('c', 'z'), maxcharge=2)
        self._compare_spectra(spec, spec_int, self.spec_PEPTIDE_cz, self.spec_int_PEPTIDE_cz)

    def test_theor_spec_termPEPTIDE(self):
        MOD = 42.12
        acc = 0.01
        custom_mass = mass.std_aa_mass.copy()
        custom_mass['H-'] = MOD + mass.nist_mass['H'][0][0]
        spec, spec_int = get_theor_spectrum(list('PEPTIDE'), acc, ion_types=('b', 'y'), maxcharge=2,
                                            aa_mass=custom_mass)
        spec_true = self.spec_PEPTIDE.copy()
        for k in spec_true:
            if k[0] == 'b':
                spec_true[k] += MOD / k[1]
        spec_int_true = self.spec_int_PEPTIDE.copy()
        spec_int_true['b'] = {int(x / acc) for x in np.concatenate((spec_true[('b', 1)], spec_true[('b', 2)]))}
        self._compare_spectra(spec, spec_int, spec_true, spec_int_true)

    def test_theor_spec_PEPTIDEterm(self):
        MOD = 42.12
        acc = 0.01
        custom_mass = mass.std_aa_mass.copy()
        custom_mass['-OH'] = MOD + mass.nist_mass['H'][0][0] + mass.nist_mass['O'][0][0]
        spec, spec_int = get_theor_spectrum(list('PEPTIDE'), acc, ion_types=('b', 'y'), maxcharge=2,
                                            aa_mass=custom_mass)
        spec_true = self.spec_PEPTIDE.copy()
        for k in spec_true:
            if k[0] == 'y':
                spec_true[k] += MOD / k[1]
        spec_int_true = self.spec_int_PEPTIDE.copy()
        spec_int_true['y'] = {int(x / acc) for x in np.concatenate((spec_true[('y', 1)], spec_true[('y', 2)]))}
        self._compare_spectra(spec, spec_int, spec_true, spec_int_true)


class AAstatResultTest(unittest.TestCase):
    def setUp(self):
        self.maxDiff = None
        self.data_dir = os.path.join(
            os.path.dirname(os.path.dirname(os.path.abspath(__file__))), 'test_data')

        self.pepxml = [os.path.join(self.data_dir, 'SDS_01_0{}.pepXML'.format(num)) for num in [1, 2]]
        self.mzml = [os.path.join(self.data_dir, 'SDS_01_0{}.mzML'.format(num)) for num in [1, 2]]
        verbosity = int(os.environ.get('AASTAT_VERBOSITY', '1'))
        levels = [logging.WARNING, logging.INFO, logging.DEBUG, utils.INTERNAL]
        logging.basicConfig(format='{levelname:>8}: {asctime} {message}',
                        datefmt='[%H:%M:%S]', level=levels[verbosity], style='{')

    def test_aastat(self):
        if not os.path.isdir(self.data_dir):
            print('Test data not found, skipping integrative test.')
            return

        for f in self.pepxml + self.mzml:
            if not os.path.isfile(f):
                print(f, 'not found, skipping integrative test.')
                return

        args = argparse.Namespace(dir=self.data_dir, pepxml=self.pepxml, mzml=self.mzml,
            mgf=None, csv=None, params=None)
        params_dict = utils.get_params_dict(args)
        self.figure_data, self.table, self.locmod_df, self.mass_shift_data_dict, self.fix_mods, self.var_mods = AA_stat(params_dict, args)

        self.assertEqual(self.table.index.tolist(),
            ['-246.1899', '-229.1630', '-203.1838', '-172.1414', '-171.1385', '-157.1416',
             '-147.1574', '-129.1469', '-116.0577', '-115.1202', '-114.1362',
             '-100.1206', '-91.0089', '-72.1252', '-25.0313', '-18.0105', '-9.0368', '-2.0155', '-1.0037',
             '+0.0000', '+0.9842', '+1.0030', '+1.9877', '+13.9785', '+14.9840', '+15.0116',
             '+15.9949', '+16.9978', '+17.0270', '+18.0289', '+30.9811', '+31.9894', '+32.9924',
             '+47.9848', '+52.9218', '+57.0220', '+58.0244', '+100.0162', '+229.1630', '+230.1655']
            )

        self.assertEqual(self.table['# peptides in bin'].tolist(),
            [57, 179, 173, 540, 100, 84, 103, 277, 58, 66, 284, 102, 67, 125, 61, 139, 145, 70, 212,
             2833, 342, 559, 104, 150, 125, 72, 455, 171, 281, 55, 106, 198, 61, 59, 339, 403,
             109, 65, 158, 77]
            )

        self.assertEqual(self.fix_mods, {})

        self.assertEqual(self.var_mods, [
            ('isotope error', 1), ('N', '+0.9842'), ('M', '+15.9949'), ('K', '-114.1362'),
            ('K', '+57.0220'), ('E', '+17.0270')
            ])

        self.assertEqual(self.locmod_df['localization'].tolist(),
            [
                {'N-term_-246.1899': 24, 'C_-246.1899': 26, 'P_-246.1899': 8, 'H_-246.1899': 4, 'non-localized': 7, 'Y_-246.1899': 7},
                {'E_+17.0270': 30, 'C_-246.1899': 19, 'N-term_+17.0270': 13, 'D_+17.0270': 37, 'P_-246.1899': 32, 'N-term_-246.1899': 6, 'non-localized': 37, 'K_+17.0270': 21, 'H_-246.1899': 16, 'Y_-246.1899': 23, 'C-term_+17.0270': 14, 'R_+17.0270': 2},
                {'H_-203.1838': 32, 'Y_-203.1838': 87, 'N-term_-203.1838': 9, 'non-localized': 4},
                {},
                {},
                {'H_-157.1416': 17, 'N-term_-157.1416': 5},
                {'H_-147.1574': 19, 'non-localized': 8, 'N-term_-147.1574': 3},
                {'H_-129.1469': 43, 'N-term_-129.1469': 5},
                {'C_-116.0577': 24, 'non-localized': 28, 'N-term_-116.0577': 1},
                {'K_-115.1202': 62, 'C-term_-115.1202': 47},
                {'K_-114.1362': 173, 'Q_+0.9842': 4, 'C-term_-115.1202': 7, 'K_-115.1202': 7, 'H_-114.1362': 14, 'non-localized': 7, 'C-term_-114.1362': 151, 'N_+0.9842': 2, 'R_+0.9842': 1, 'N-term_-114.1362': 5, 'D_+15.0116': 1, 'H_-129.1469': 3, 'I_+15.0116': 1, 'N-term_+15.0116': 1, 'E_+15.0116': 1},
                {'C-term_-100.1206': 74, 'K_-100.1206': 97, 'H_-157.1416': 2, 'E_+57.0220': 1, 'N-term_-100.1206': 2, 'G_+57.0220': 1},
                {'non-localized': 1, 'C_-91.0089': 63},
                {'K_-72.1252': 124, 'C-term_-72.1252': 92, 'N-term_-72.1252': 4},
                {'C_-25.0313': 58, 'N-term_-25.0313': 3, 'Y_-25.0313': 1, 'non-localized': 1},
                {'Y_-18.0105': 2, 'non-localized': 22, 'Q_-18.0105': 8, 'T_-18.0105': 40, 'S_-18.0105': 20, 'N_-18.0105': 7, 'D_-18.0105': 26, 'E_-18.0105': 12, 'C_-18.0105': 1, 'N-term_-18.0105': 1},
                {'C_-9.0368': 125, 'non-localized': 10, 'C_-25.0313': 8, 'C_+15.9949': 1, 'G_+15.9949': 2, 'C-term_-9.0368': 1, 'R_-9.0368': 2, 'N-term_-9.0368': 16, 'E_+15.9949': 1, 'I_+15.9949': 1, 'M_+15.9949': 1, 'N-term_+15.9949': 1, 'A_+15.9949': 1, 'C-term_+15.9949': 1, 'K_+15.9949': 1},
                {'T_-2.0155': 1, 'C_-2.0155': 30, 'T_-18.0105': 2, 'F_+15.9949': 1, 'Y_-18.0105': 1, 'D_+15.9949': 1, 'L_+15.9949': 3, 'E_-18.0105': 3, 'non-localized': 10, 'N_-18.0105': 2, 'C-term_-2.0155': 7, 'K_-2.0155': 7, 'S_-18.0105': 2, 'T_+15.9949': 1, 'Q_+15.9949': 1, 'N-term_-2.0155': 2, 'V_-2.0155': 3, 'A_+15.9949': 3, 'C_-18.0105': 2, 'Q_-18.0105': 1, 'E_+15.9949': 1, 'S_-2.0155': 2, 'N-term_+15.9949': 1, 'Y_-2.0155': 2, 'K_+15.9949': 1, 'N-term_-18.0105': 1, 'D_-18.0105': 2, 'W_+15.9949': 1, 'M_+15.9949': 2},
                {'C_-1.0037': 86, 'N-term_-1.0037': 5},
                {},
                {'N_+0.9842': 228, 'F_+0.9842': 28, 'Q_+0.9842': 64, 'C-term_+0.9842': 7, 'R_+0.9842': 10, 'non-localized': 5, 'N-term_+0.9842': 16},
                {'T_+1.0030': 35, 'D_+1.0030': 34, 'V_+1.0030': 42, 'Y_+1.0030': 34, 'non-localized': 63, 'S_+1.0030': 38, 'C_+1.0030': 34, 'P_+1.0030': 44, 'E_+1.0030': 65, 'G_+1.0030': 35, 'L_+1.0030': 45, 'A_+1.0030': 21, 'I_+1.0030': 27, 'M_+1.0030': 9, 'F_+1.0030': 33, 'N-term_+1.0030': 1},
                {'V_+1.9877': 9, 'F_+1.9877': 3, 'Q_+1.9877': 15, 'N_+1.9877': 56, 'non-localized': 18, 'C-term_+1.9877': 1, 'R_+1.9877': 1, 'K_+1.9877': 1, 'W_+1.9877': 1},
                {'non-localized': 17, 'E_+13.9785': 10, 'T_-18.0105': 7, 'I_+31.9894': 1, 'P_+13.9785': 12, 'Q_+13.9785': 9, 'T_-2.0155': 3, 'W_+15.9949': 4, 'D_+15.9949': 2, 'Y_-2.0155': 3, 'V_+13.9785': 12, 'S_+13.9785': 6, 'I_+13.9785': 10, 'P_+31.9894': 2, 'N-term_+13.9785': 8, 'L_+13.9785': 19, 'W_+13.9785': 6, 'T_+13.9785': 6, 'C-term_+31.9894': 3, 'K_+31.9894': 2, 'C_+31.9894': 2, 'C-term_-2.0155': 6, 'K_-2.0155': 7, 'S_-18.0105': 2, 'W_+31.9894': 2, 'S_-2.0155': 3, 'V_+15.9949': 1, 'N-term_-2.0155': 1, 'Y_-18.0105': 1, 'R_+31.9894': 1, 'C-term_+13.9785': 2, 'R_+13.9785': 3, 'F_+15.9949': 1, 'C_+15.9949': 1, 'A_+13.9785': 9, 'E_-18.0105': 2, 'N-term_+15.9949': 2, 'L_+15.9949': 1, 'L_+31.9894': 1, 'Y_+31.9894': 1, 'G_+15.9949': 1, 'C_-2.0155': 1, 'A_+15.9949': 1, 'Y_+15.9949': 3, 'T_+15.9949': 1, 'M_+15.9949': 1, 'V_-2.0155': 1, 'D_-18.0105': 1, 'V_+31.9894': 1, 'Q_+15.9949': 1},
                {'T_+14.9840': 9, 'W_+14.9840': 7, 'M_+14.9840': 14, 'non-localized': 31, 'S_+14.9840': 6, 'P_+14.9840': 9, 'V_+14.9840': 7, 'E_+14.9840': 10, 'L_+14.9840': 16, 'Q_+14.9840': 3, 'A_+14.9840': 4, 'N-term_+14.9840': 7, 'I_+14.9840': 7, 'C-term_+14.9840': 2, 'R_+14.9840': 2},
                {'non-localized': 12, 'D_+15.0116': 5, 'M_+15.0116': 33, 'E_+15.0116': 8, 'Y_+15.0116': 4, 'S_-2.0155': 1, 'C-term_+17.0270': 4, 'R_+17.0270': 1, 'N-term_+15.0116': 3, 'D_+17.0270': 2, 'V_-2.0155': 2, 'C_-2.0155': 2, 'T_-2.0155': 1, 'K_+17.0270': 3, 'I_+15.0116': 1, 'L_+15.0116': 3},
                {'A_+15.9949': 10, 'M_+15.9949': 167, 'non-localized': 59, 'H_+15.9949': 1, 'L_+15.9949': 15, 'P_+15.9949': 11, 'V_+15.9949': 8, 'T_+15.9949': 10, 'W_+15.9949': 24, 'E_+15.9949': 11, 'Q_+15.9949': 6, 'S_+15.9949': 9, 'C_+15.9949': 42, 'Y_+15.9949': 35, 'Q_+0.9842': 4, 'M_+15.0116': 3, 'G_+15.9949': 4, 'F_+0.9842': 1, 'L_+15.0116': 4, 'N-term_+15.9949': 20, 'N_+0.9842': 3, 'F_+15.9949': 11, 'I_+15.9949': 4, 'K_+15.9949': 8, 'C-term_+15.9949': 6, 'D_+15.9949': 4, 'I_+15.0116': 1, 'N_+15.9949': 7, 'N-term_+15.0116': 1, 'E_+15.0116': 1, 'C-term_+0.9842': 1, 'R_+0.9842': 1},
                {'A_+16.9978': 7, 'G_+16.9978': 1, 'non-localized': 85, 'V_+16.9978': 9, 'F_+16.9978': 3, 'S_+16.9978': 3, 'L_+16.9978': 4, 'Y_+16.9978': 5, 'I_+16.9978': 3, 'P_+16.9978': 4, 'M_+16.9978': 24, 'N_+16.9978': 3, 'C_+16.9978': 8, 'W_+16.9978': 6, 'T_+16.9978': 1, 'C-term_+16.9978': 1, 'K_+16.9978': 1, 'E_+16.9978': 3, 'N-term_+16.9978': 1},
                {'C-term_+17.0270': 62, 'R_+17.0270': 11, 'K_+17.0270': 46, 'D_+17.0270': 95, 'E_+17.0270': 114, 'N-term_+17.0270': 5, 'non-localized': 10, 'P_+17.0270': 1, 'L_+17.0270': 1, 'V_+17.0270': 1, 'A_+17.0270': 1},
                {'non-localized': 12, 'C_+18.0289': 14, 'D_+18.0289': 9, 'N-term_+18.0289': 1, 'Y_+18.0289': 1, 'E_+18.0289': 14, 'C-term_+18.0289': 5, 'R_+18.0289': 2, 'K_+18.0289': 2, 'P_+18.0289': 1},
                {'C-term_+31.9894': 1, 'C_-1.0037': 25, 'E_+31.9894': 4, 'F_+31.9894': 2, 'I_+31.9894': 1, 'K_+31.9894': 1, 'L_+31.9894': 2, 'M_+31.9894': 2, 'N-term_+30.9811': 1, 'N-term_+31.9894': 1, 'N-term_-1.0037': 1, 'P_+31.9894': 2, 'V_+31.9894': 4, 'W_+30.9811': 14, 'W_+31.9894': 1, 'Y_+31.9894': 6, 'non-localized': 5},
                {'non-localized': 60, 'V_+31.9894': 3, 'P_+31.9894': 8, 'W_+31.9894': 35, 'E_+31.9894': 10, 'Y_+31.9894': 19, 'I_+31.9894': 5, 'Y_-25.0313': 4, 'G_+57.0220': 1, 'C-term_+31.9894': 17, 'K_+31.9894': 11, 'C_+31.9894': 6, 'L_+31.9894': 12, 'F_+31.9894': 14, 'R_+31.9894': 6, 'C_-25.0313': 1, 'M_+57.0220': 1, 'C_+57.0220': 1, 'H_+57.0220': 1, 'N-term_+31.9894': 11, 'S_+57.0220': 1, 'M_+31.9894': 3},
                {'C_+32.9924': 1, 'E_+32.9924': 4, 'F_+32.9924': 1, 'I_+32.9924': 2, 'L_+32.9924': 2, 'M_+32.9924': 2, 'P_+32.9924': 3, 'V_+32.9924': 1, 'W_+32.9924': 8, 'Y_+32.9924': 4, 'non-localized': 33},
                {'I_+31.9894': 2, 'V_+15.9949': 3, 'non-localized': 19, 'E_+31.9894': 1, 'N_+15.9949': 1, 'W_+47.9848': 11, 'W_+31.9894': 15, 'C_+15.9949': 5, 'M_+15.9949': 2, 'S_+15.9949': 1, 'F_+47.9848': 1, 'E_+15.9949': 3, 'A_+15.9949': 1, 'Y_+47.9848': 8, 'C_+47.9848': 1, 'H_+57.0220': 1, 'C-term_-9.0368': 1, 'R_-9.0368': 1, 'N-term_+31.9894': 1, 'T_+15.9949': 1, 'W_+15.9949': 1},
                {},
                {'M_+57.0220': 39, 'D_+57.0220': 3, 'S_+57.0220': 8, 'T_+57.0220': 10, 'E_+57.0220': 12, 'C_+57.0220': 6, 'H_+57.0220': 38, 'G_+57.0220': 14, 'Y_+57.0220': 62, 'C-term_+57.0220': 130, 'K_+57.0220': 143, 'A_+57.0220': 14, 'non-localized': 53, 'N-term_+57.0220': 11},
                {'E_+58.0244': 4, 'D_+58.0244': 3, 'Y_+58.0244': 14, 'non-localized': 43, 'M_+58.0244': 7, 'T_+58.0244': 6, 'A_+58.0244': 2, 'H_+58.0244': 11, 'Q_+58.0244': 3, 'N-term_+58.0244': 3, 'K_+58.0244': 11, 'S_+58.0244': 2, 'G_+58.0244': 2, 'L_+58.0244': 1, 'C-term_+58.0244': 5},
                {'non-localized': 11, 'T_+229.1630': 2, 'H_-129.1469': 5, 'S_+100.0162': 47, 'N-term_+100.0162': 4, 'T_+100.0162': 2, 'S_+229.1630': 3, 'N-term_-129.1469': 1, 'N-term_+229.1630': 1},
                {'T_+229.1630': 38, 'S_+229.1630': 83, 'N-term_+229.1630': 12, 'C-term_+229.1630': 3, 'K_+229.1630': 3, 'non-localized': 14, 'H_+229.1630': 12, 'Q_+229.1630': 1, 'G_+229.1630': 2, 'A_+229.1630': 1, 'D_+229.1630': 1, 'E_+229.1630': 1, 'F_+229.1630': 1, 'V_+229.1630': 1},
                {'T_+230.1655': 14, 'N-term_+230.1655': 5, 'non-localized': 20, 'E_+230.1655': 2, 'S_+230.1655': 36, 'C-term_+230.1655': 1, 'K_+230.1655': 1, 'H_+230.1655': 4},
            ])
